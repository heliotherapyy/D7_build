{"version":3,"sources":["helpers/passport_setup/local.js"],"names":["localSetup","serializeUser","user","done","id","deserializeUser","User","forge","where","fetch","require","then","toJSON","catch","err","use","usernameField","passwordField","email","password","compareSync","message"],"mappings":";;;;;;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;;;AALA;;AAOA,IAAMA,aAAa,SAAbA,UAAa,GAAM;AACvB,qBAASC,aAAT,CAAuB,UAACC,IAAD,EAAOC,IAAP,EAAgB;AACrCA,SAAK,IAAL,EAAWD,KAAKE,EAAhB;AACD,GAFD;AAGA,qBAASC,eAAT,CAAyB,UAACD,EAAD,EAAKD,IAAL,EAAc;AACrC,qBAAMG,IAAN,CAAWC,KAAX,GAAmBC,KAAnB,CAAyB,EAACJ,IAAIA,EAAL,EAAzB,EAAmCK,KAAnC,CAAyC,EAACC,SAAS,IAAV,EAAzC,EACCC,IADD,CACM,UAACT,IAAD;AAAA,aAAUC,KAAK,IAAL,EAAWD,KAAKU,MAAL,EAAX,CAAV;AAAA,KADN,EAECC,KAFD,CAEO,UAACC,GAAD;AAAA,aAASX,KAAKW,GAAL,EAAU,KAAV,CAAT;AAAA,KAFP;AAGD,GAJD;AAKA,qBAASC,GAAT,CAAa,4BAAkB;AAC7BC,mBAAe,OADc;AAE7BC,mBAAe;AAFc,GAAlB,EAGV,UAACC,KAAD,EAAQC,QAAR,EAAkBhB,IAAlB,EAA2B;AAC5B,qBAAMG,IAAN,CAAWC,KAAX,GACCC,KADD,CACO,EAACU,OAAOA,KAAR,EADP,EAECT,KAFD,CAEO,EAACC,SAAS,IAAV,EAFP,EAGCC,IAHD,CAGM,UAACT,IAAD,EAAU;AACdA,aAAOA,KAAKU,MAAL,EAAP;AACA,UAAG,mBAAOQ,WAAP,CAAmBD,QAAnB,EAA6BjB,KAAKiB,QAAlC,CAAH,EAA+C;AAC7ChB,aAAK,IAAL,EAAWD,IAAX;AACD,OAFD,MAEO;AACLC,aAAK,IAAL,EAAW,KAAX,EAAkB,EAAEkB,SAAS,qBAAX,EAAlB;AACD;AACF,KAVD,EAUGR,KAVH,CAUS,UAACC,GAAD,EAAS;AAChBX,WAAK,IAAL,EAAW,KAAX,EAAkB,EAAEkB,SAAS,oBAAX,EAAlB;AACD,KAZD;AAaD,GAjBY,CAAb;AAkBD,CA3BD;;kBA6BerB,U","file":"helpers/passport_setup/local.js","sourcesContent":["/* Passport local setting */\n\nimport passport from \"passport\";\nimport LocalStrategy from \"passport-local\";\nimport model from \"../../db/models\";\nimport bcrypt from \"bcryptjs\";\n\nconst localSetup = () => {\n  passport.serializeUser((user, done) => {\n    done(null, user.id);\n  });\n  passport.deserializeUser((id, done) => {\n    model.User.forge().where({id: id}).fetch({require: true})\n    .then((user) => done(null, user.toJSON()))\n    .catch((err) => done(err, false));\n  });\n  passport.use(new LocalStrategy({\n    usernameField: \"email\",\n    passwordField: \"password\"\n  }, (email, password, done) => {\n    model.User.forge()\n    .where({email: email})\n    .fetch({require: true})\n    .then((user) => {\n      user = user.toJSON();\n      if(bcrypt.compareSync(password, user.password)){\n        done(null, user);\n      } else {\n        done(null, false, { message: \"Incorrect password.\"});\n      }\n    }).catch((err) => {\n      done(null, false, { message: \"Incorrect username\" });\n    });\n  }));\n};\n\nexport default localSetup;"],"sourceRoot":"/source/"}
{"version":3,"sources":["api/payment.js"],"names":["payment","user","q","body","res","userId","id","username","userProjectId","endAt","JSON","parse","accessToken","today","Date","paymentDue","setDate","getDate","valueOf","toString","slice","cardNumber","expiry","birth","pwd2digit","amount","currency","console","error","paymentReq","params","customer_uid","checking_amount","card_number","pwd_2digit","schedules","log","post","then","answer","data","code","response","access_token","_token","message","length","Transaction","merchant_uid","schedule_at","toJSON","save","status","send","catch","err","end"],"mappings":"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","file":"api/payment.js","sourcesContent":["import model from \"../db/models\";\nimport collection from \"../db/collections\";\nimport axios from \"axios\";\nimport apiKeys from \"./import/apiKeys\";\n\n/* Send payment request to Iamport and create new transaction in 'transaction' table */\n/* Post Data: postId */\n\nconst payment = (user, q, body, res) => {\n  const userId = user.id;\n  const username = user.username;\n\n  const { userProjectId, endAt } = body;\n  let payment = body.payment;\n  /* If payment is not parsed, parse it below */\n  if (typeof payment === \"string\") {\n    payment = JSON.parse(payment);\n  }\n\n  // Test code below\n  // let userId;\n  // let username;\n  // if (user && user.id) {\n  //   userId = user.id;\n  //   username = user.username;\n  // }\n  // if (q && q.id) {\n  //   userId = q.id;\n  //   username = q.username;\n  // } else {\n  //   userId = 1;\n  //   username = \"Lenny\";\n  // }\n\n  let accessToken = \"\";\n  const today = new Date();\n  /* paymentDue is day after endAt date */\n  let paymentDue = new Date(endAt);\n  paymentDue.setDate(paymentDue.getDate() + 1);\n  /* convert paymentDue to 10 digit UNIX timestamp */\n  paymentDue = paymentDue.valueOf().toString().slice(0, 10);\n\n  /* Check if all payment infos in the request */\n  const { cardNumber, expiry, birth, pwd2digit, amount, currency } = payment;\n  if (!(cardNumber && expiry && birth && pwd2digit && amount && currency)) {\n    console.error(\"Error: NOT enough payment infos are passed through request\");\n    throw \"NOT enough payment infos are passed through request\";\n  }\n  const paymentReq = {\n    params: {},\n    customer_uid: userId + \"---\" + username, // distinctive customer uid. If customer_uid is same as before, iamport automatically process with previous card infos even if now we have sent no card infos\n    checking_amount: 0, // if you want check the credit card is valid, can validate with checking_amount more then;\n    card_number: cardNumber, // stirng, \"xxxx-xxxx-xxxx-xxxx\"\n    expiry: expiry, // string, \"yyyy-mm\"\n    birth: birth, // string, \"yymmdd\"\n    pwd_2digit: pwd2digit, // string, \"xx\"\n    schedules: [\n      {\n        \"merchant_uid\": userId + \"-\" + userProjectId + \"-\" + today.valueOf(), // distinctive order uid\n        \"schedule_at\": paymentDue,  // 10 digit UNIX timestamp\n        \"amount\": amount // integer\n      }\n    ]\n  };\n\n  console.log(\"payment in progress\");\n  return axios.post(\"https://api.iamport.kr/users/getToken\", apiKeys)\n  .then((answer) => {\n    const data = answer.data;\n\n    /* Check if import response's code is 0 or not */\n    /* If 0, it is well responsed, if not, should check message */\n    if (data.code === 0) {\n      console.log(\"Success: received access_token: \", data);\n      accessToken = data.response.access_token;\n      paymentReq.params._token = accessToken;\n    } else {\n      console.error(\"Error: Failed to get access_token: \", data.message);\n      throw \"Failed to get access_token: \" + data.message;\n    }\n  })\n  .then(() => {\n    if (accessToken.length === 0) {\n      console.error(\"Failed to store access_token on the server\");\n      throw \"Failed to store access_token on the server\";\n    }\n    console.log(\"PaymentReqData is \", paymentReq);\n    return axios.post(\"https://api.iamport.kr/subscribe/payments/schedule?_token=\" + accessToken, paymentReq)\n    .then((answer) => answer);\n  })\n  .then((answer) => {\n    const data = answer.data;\n    if (data.code === 0) {\n      console.log(\"Success: scheduled transaction: \", data);\n\n      return new model.Transaction({userId: userId, userProjectId: userProjectId, customer_uid: data.response[0].customer_uid, merchant_uid: data.response[0].merchant_uid, paymentDue: new Date( data.response[0].schedule_at * 1000).toJSON().slice(0, 10), amount: data.response[0].amount, currency: currency}).save()\n      .then(() => {\n        /* Return data, if res === null or res === undefined */\n        if (!res) {\n          console.log(\"Method use: Return createNewProject Result: \", data);\n          return data;\n        } else {\n          res.status(200).send(data);\n        }\n      });\n\n    } else {\n      console.error(\"Error: Failed to schedule transaction: \", data);\n      throw \"Failed to schedule transaction: \" + data.message;\n    }\n  })\n  .catch((err) => {\n    console.error(\"Error: Failed in transaction in 'payment.js': \", err);\n\n    /* Return err, if res === null or res === undefined */\n    if (!res) {\n      throw \"Failed in transaction in 'payment.js': \" + err;\n    } else {\n      res.status(500).end();\n      throw \"Failed in transaction in 'payment.js': \" + err;\n    }\n  });\n};\n\nexport default payment;\n"],"sourceRoot":"/source/"}
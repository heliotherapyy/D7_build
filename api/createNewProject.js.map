{"version":3,"sources":["api/createNewProject.js"],"names":["createNewProject","user","q","body","res","userId","id","projectId","userProjectId","title","description","startAt","image","payment","today","Date","startAtInObj","endAt","setDate","getDate","toJSON","slice","onDay","Project","forge","set","save","then","project","UserProject","userProject","data","donePayment","postData","JSON","parse","answer","console","log","status","send","catch","err","error","destroy","end"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;;;AAEA;AACA;;AAEA,IAAMA,mBAAmB,SAAnBA,gBAAmB,CAACC,IAAD,EAAOC,CAAP,EAAUC,IAAV,EAAgBC,GAAhB,EAAwB;AAC/C,MAAMC,SAASJ,KAAKK,EAApB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,MAAIC,kBAAJ;AAAA,MAAeC,sBAAf;;AAhB+C,MAkBvCC,KAlBuC,GAkBSN,IAlBT,CAkBvCM,KAlBuC;AAAA,MAkBhCC,WAlBgC,GAkBSP,IAlBT,CAkBhCO,WAlBgC;AAAA,MAkBnBC,OAlBmB,GAkBSR,IAlBT,CAkBnBQ,OAlBmB;AAAA,MAkBVC,KAlBU,GAkBST,IAlBT,CAkBVS,KAlBU;AAAA,MAkBHC,OAlBG,GAkBSV,IAlBT,CAkBHU,OAlBG;;AAmB/C,MAAMC,QAAQ,IAAIC,IAAJ,EAAd;AACA,MAAMC,eAAe,IAAID,IAAJ,CAASJ,OAAT,CAArB;;AAEA;AACA,MAAIM,QAAQ,IAAIF,IAAJ,CAASJ,OAAT,CAAZ;AACAM,QAAMC,OAAN,CAAcF,aAAaG,OAAb,KAAyB,CAAvC;AACAF,UAAQA,MAAMG,MAAN,GAAeC,KAAf,CAAqB,CAArB,EAAwB,EAAxB,CAAR;;AAEA;AACA,MAAIC,QAAQ,IAAZ;AACA,MAAIR,MAAMM,MAAN,GAAeC,KAAf,CAAqB,CAArB,EAAwB,EAAxB,MAAgCL,aAAaI,MAAb,GAAsBC,KAAtB,CAA4B,CAA5B,EAA+B,EAA/B,CAApC,EAAwE;AACtEC,YAAQ,CAAR;AACD;;AAED;AACA,SAAO,iBAAMC,OAAN,CAAcC,KAAd,GAAsBC,GAAtB,CAA0B;AAC/BpB,YAAQA,MADuB;AAE/BI,WAAOA,KAFwB;AAG/BC,iBAAaA,WAHkB;AAI/BE,WAAOA;AAJwB,GAA1B,EAKJc,IALI,GAMNC,IANM,CAMD,UAACC,OAAD,EAAa;AACjBrB,gBAAYqB,QAAQtB,EAApB;;AAEA,WAAO,iBAAMuB,WAAN,CAAkBL,KAAlB,GAA0BC,GAA1B,CAA8B;AACnCpB,cAAQA,MAD2B;AAEnCE,iBAAWA,SAFwB;AAGnCI,eAASA,OAH0B;AAInCM,aAAOA;AAJ4B,KAA9B,EAKJS,IALI,EAAP;AAMD,GAfM,EAgBNC,IAhBM,CAgBD,UAACG,WAAD,EAAiB;AACrBA,kBAAcA,YAAYV,MAAZ,EAAd;AACAZ,oBAAgBsB,YAAYxB,EAA5B;AACA,QAAMyB,OAAO;AACXzB,UAAIwB,YAAYxB,EADL;AAEXG,aAAOA,KAFI;AAGXC,mBAAaA,WAHF;AAIXY,aAAOA,KAJI;AAKXL,aAAOa,YAAYb,KALR;AAMXe,mBAAa;AANF,KAAb;AAQA,WAAOD,IAAP;AACD,GA5BM,EA6BNJ,IA7BM,CA6BD,UAACI,IAAD,EAAU;AACd,QAAME,WAAW;AACfzB,qBAAeuB,KAAKzB,EADL;AAEfW,aAAOc,KAAKd,KAFG;AAGfJ,eAASA;AAHM,KAAjB;;AAMA;AACA,QAAI,OAAOoB,SAASpB,OAAhB,KAA4B,QAAhC,EAA0C;AACxCoB,eAASpB,OAAT,GAAmBqB,KAAKC,KAAL,CAAWF,SAASpB,OAApB,CAAnB;AACD;;AAED;AACA,WAAO,uBAAeZ,IAAf,EAAqB,IAArB,EAA2BgC,QAA3B,EAAqC,IAArC,EACNN,IADM,CACD,UAACS,MAAD,EAAY;AAChBL,WAAKC,WAAL,GAAmB,IAAnB;AACA,aAAOD,IAAP;AACD,KAJM,CAAP;AAKD,GA/CM,EAgDNJ,IAhDM,CAgDD,UAACI,IAAD,EAAU;AACd;AACA,QAAI,CAAC3B,GAAL,EAAU;AACRiC,cAAQC,GAAR,CAAY,kDAAZ,EAAgEP,IAAhE;AACA,aAAOA,IAAP;AACD,KAHD,MAGO;AACL3B,UAAImC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBT,IAArB;AACD;AACF,GAxDM,EAyDNU,KAzDM,CAyDA,UAACC,GAAD,EAAS;AACd;AACAL,YAAQM,KAAR,CAAc,8DAAd,EAA8ED,GAA9E;;AAEA;AACA,QAAI,iBAAMnB,OAAV,CAAkB,EAACjB,IAAIC,SAAL,EAAlB,EAAmCqC,OAAnC,GACCjB,IADD,CACM,YAAM;AACVU,cAAQC,GAAR,CAAY,4BAAZ;AACAD,cAAQC,GAAR,CAAY,qCAAZ;AACA,UAAI,iBAAMT,WAAV,CAAsB,EAACvB,IAAIE,aAAL,EAAtB,EAA2CoC,OAA3C;AACD,KALD,EAMCH,KAND,CAMO,UAACC,GAAD,EAAS;AACdL,cAAQM,KAAR,CAAc,iDAAd;AACD,KARD;;AAUA;AACA,QAAI,CAACvC,GAAL,EAAU;AACR,aAAOsC,GAAP;AACD,KAFD,MAEO;AACLtC,UAAImC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAACR,aAAa,KAAd,EAArB,EAA2Ca,GAA3C;AACD;AACF,GA9EM,CAAP;AA+ED,CAjHD;;kBAmHe7C,gB","file":"api/createNewProject.js","sourcesContent":["import model from \"../db/models\";\nimport collection from \"../db/collections\";\nimport paymentRequest from \"./payment\";\n\n/* Create new project in 'project' and 'userProject' tables */\n/* Post Data: title, description, startAt, image, payment */\n\nconst createNewProject = (user, q, body, res) => {\n  const userId = user.id;\n\n  // Test code below\n  // let userId;\n  // if (user && user.id) {\n  //   userId = user.id;\n  // }\n  // if (q && q.id) {\n  //   userId = q.id;\n  // } else {\n  //   userId = 1;\n  // }\n\n  /* If the payment is failed, delete project and userProject */\n  /* by using ids below */\n  let projectId, userProjectId;\n\n  const { title, description, startAt, image, payment } = body;\n  const today = new Date();\n  const startAtInObj = new Date(startAt);\n\n  /* endAt = startAt + 6 days */\n  let endAt = new Date(startAt);\n  endAt.setDate(startAtInObj.getDate() + 6);\n  endAt = endAt.toJSON().slice(0, 10);\n\n  /* If startAt is today, assign 1 to 'onDay'. Otherwise, null */\n  let onDay = null;\n  if (today.toJSON().slice(0, 10) === startAtInObj.toJSON().slice(0, 10)) {\n    onDay = 1;\n  }\n\n  /* Start Point */\n  return model.Project.forge().set({\n    userId: userId,\n    title: title,\n    description: description,\n    image: image\n  }).save()\n  .then((project) => {\n    projectId = project.id;\n\n    return model.UserProject.forge().set({\n      userId: userId,\n      projectId: projectId,\n      startAt: startAt,\n      endAt: endAt\n    }).save();\n  })\n  .then((userProject) => {\n    userProject = userProject.toJSON();\n    userProjectId = userProject.id;\n    const data = {\n      id: userProject.id,\n      title: title,\n      description: description,\n      onDay: onDay,\n      endAt: userProject.endAt,\n      donePayment: false\n    };\n    return data;\n  })\n  .then((data) => {\n    const postData = {\n      userProjectId: data.id,\n      endAt: data.endAt,\n      payment: payment\n    };\n\n    /* If postData.payment is not parsed, it will be parsed below */\n    if (typeof postData.payment === \"string\") {\n      postData.payment = JSON.parse(postData.payment);\n    }\n\n    /* Send payment Request through 'payment.js' */\n    return paymentRequest(user, null, postData, null)\n    .then((answer) => {\n      data.donePayment = true;\n      return data;\n    });\n  })\n  .then((data) => {\n    /* Return data, if res === null or res === undefined */\n    if (!res) {\n      console.log(\"Methodical use: Return createNewProject Result: \", data);\n      return data;\n    } else {\n      res.status(200).send(data);\n    }\n  })\n  .catch((err) => {\n    /* If the process fails, including payment process, rollback */\n    console.error(\"Error: Failed to store in 'project' or 'userProject' table: \", err);\n\n    /* Delete project, userproject */\n    new model.Project({id: projectId}).destroy()\n    .then(() => {\n      console.log(\"deteted false project info\");\n      console.log(\"now deleting false userproject info\");\n      new model.UserProject({id: userProjectId}).destroy();\n    })\n    .catch((err) => {\n      console.error(\"Error: Failed to revert project and userproject\");\n    });\n\n    /* Return err, if res === null or res === undefined */\n    if (!res) {\n      return err;\n    } else {\n      res.status(500).send({donePayment: false}).end();\n    }\n  });\n};\n\nexport default createNewProject;\n"],"sourceRoot":"/source/"}
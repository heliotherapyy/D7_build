{"version":3,"sources":["api/fetchWishProjects.js"],"names":["fetchWishProjects","user","q","res","userId","id","result","Wish","where","orderBy","fetchAll","withRelated","then","wishes","toJSON","forEach","wish","data","project","title","description","image","wishCount","created_at","createAt","updated_at","updatedAt","username","doneWish","push","status","send","catch","err","console","error","end"],"mappings":";;;;;;AAAA;;;;AACA;;;;;;AAEA;AACA;;AAEA,IAAMA,oBAAoB,SAApBA,iBAAoB,CAACC,IAAD,EAAOC,CAAP,EAAUC,GAAV,EAAkB;AAC1C,MAAMC,SAASH,KAAKI,EAApB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,MAAIC,eAAJ;;AAEA;AACA,mBAAMC,IAAN,CAAWC,KAAX,CAAiB,QAAjB,EAA2BJ,MAA3B,EAAmCK,OAAnC,CAA2C,aAA3C,EAA0DC,QAA1D,CAAmE,EAACC,aAAa,CAC/E,MAD+E,EAE/E,SAF+E,CAAd,EAAnE,EAICC,IAJD,CAIM,UAACC,MAAD,EAAY;AAChBA,aAASA,OAAOC,MAAP,EAAT;AACAR,aAAS,EAAT;;AAEAO,WAAOE,OAAP,CAAe,UAACC,IAAD,EAAU;AACvB,UAAIC,OAAO,EAAX;AACA;AACA,UAAMC,UAAUF,KAAKE,OAArB;AACAD,WAAKZ,EAAL,GAAUa,QAAQb,EAAlB;AACAY,WAAKE,KAAL,GAAaD,QAAQC,KAArB;AACAF,WAAKG,WAAL,GAAmBF,QAAQE,WAA3B;AACAH,WAAKI,KAAL,GAAaH,QAAQG,KAArB;AACAJ,WAAKK,SAAL,GAAiBJ,QAAQI,SAAzB;AACAL,WAAKM,UAAL,GAAkBN,KAAKO,QAAL,GAAgBN,QAAQK,UAA1C;AACAN,WAAKQ,UAAL,GAAkBR,KAAKS,SAAL,GAAiBR,QAAQO,UAA3C;;AAEA;AACAR,WAAKb,MAAL,GAAcY,KAAKZ,MAAnB;AACAa,WAAKU,QAAL,GAAgBX,KAAKf,IAAL,CAAU0B,QAA1B;AACA;AACAV,WAAKW,QAAL,GAAgB,IAAhB;;AAEAtB,aAAOuB,IAAP,CAAYZ,IAAZ;AACD,KAnBD;AAoBA,WAAOX,MAAP;AACD,GA7BD,EA8BCM,IA9BD,CA8BM,UAACK,IAAD;AAAA,WAAUd,IAAI2B,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBd,IAArB,CAAV;AAAA,GA9BN,EA+BCe,KA/BD,CA+BO,UAACC,GAAD,EAAS;AACdC,YAAQC,KAAR,CAAc,mEAAd,EAAmFF,GAAnF;AACA9B,QAAI2B,MAAJ,CAAW,GAAX,EAAgBM,GAAhB;AACD,GAlCD;AAmCD,CArDD;;kBAuDepC,iB","file":"api/fetchWishProjects.js","sourcesContent":["import model from \"../db/models\";\nimport collection from \"../db/collections\";\n\n/* Fetch wishes from 'wish' table */\n/* Query: none */\n\nconst fetchWishProjects = (user, q, res) => {\n  const userId = user.id;\n\n  // Test code below\n  // let userId;\n  // if (user && user.id) {\n  //   userId = user.id;\n  // }\n  // if (q && q.id) {\n  //   userId = q.id;\n  // } else {\n  //   userId = 1;\n  // }\n\n  /* data container to send */\n  let result;\n\n  /* Start point */\n  model.Wish.where(\"userId\", userId).orderBy(\"-created_at\").fetchAll({withRelated: [\n    \"user\",\n    \"project\"\n  ]})\n  .then((wishes) => {\n    wishes = wishes.toJSON();\n    result = [];\n\n    wishes.forEach((wish) => {\n      let data = {};\n      /* project id, title, description, image, wishCount, created_at, updated_at */\n      const project = wish.project;\n      data.id = project.id;\n      data.title = project.title;\n      data.description = project.description;\n      data.image = project.image;\n      data.wishCount = project.wishCount;\n      data.created_at = data.createAt = project.created_at;\n      data.updated_at = data.updatedAt = project.updated_at;\n\n      /* userId, username */\n      data.userId = wish.userId;\n      data.username = wish.user.username;\n      /* doneWish */\n      data.doneWish = true;\n\n      result.push(data);\n    });\n    return result;\n  })\n  .then((data) => res.status(200).send(data))\n  .catch((err) => {\n    console.error(\"Error: Failed to read projects in 'fetchRecommendedProjects.js': \", err);\n    res.status(500).end();\n  });\n};\n\nexport default fetchWishProjects;\n"],"sourceRoot":"/source/"}
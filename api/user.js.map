{"version":3,"sources":["api/user.js"],"names":["user","q","body","res","userId","id","userPhoto","username","password","email","editData","photo","key","undefined","User","where","fetch","then","save","data","toJSON","status","send","catch","err"],"mappings":";;;;;;AAAA;;;;AACA;;;;;;AAEA;AACA;AACA,IAAMA,OAAO,cAACA,KAAD,EAAOC,CAAP,EAAUC,IAAV,EAAgBC,GAAhB,EAAwB;AACnC,MAAMC,SAASJ,MAAKK,EAApB;AADmC,MAE3BC,SAF2B,GAEcJ,IAFd,CAE3BI,SAF2B;AAAA,MAEhBC,QAFgB,GAEcL,IAFd,CAEhBK,QAFgB;AAAA,MAENC,QAFM,GAEcN,IAFd,CAENM,QAFM;AAAA,MAEIC,KAFJ,GAEcP,IAFd,CAEIO,KAFJ;;AAInC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,WAAW;AACfC,WAAOL,SADQ;AAEfC,cAAUA,QAFK;AAGfC,cAAUA,QAHK;AAIfC,WAAOA;AAJQ,GAAjB;;AAOA;AACA,OAAK,IAAIG,GAAT,IAAgBF,QAAhB,EAA0B;AACxB,QAAIA,SAASE,GAAT,MAAkBC,SAAtB,EAAiC;AAC/B,aAAOH,SAASE,GAAT,CAAP;AACD;AACF;;AAED,mBAAME,IAAN,CAAWC,KAAX,CAAiB,IAAjB,EAAuBX,MAAvB,EAA+BY,KAA/B,GACCC,IADD,CACM,UAACjB,IAAD,EAAU;AACd,QAAIA,IAAJ,EAAU;AACR,aAAOA,IAAP;AACD,KAFD,MAEO;AACL;AACA,YAAM,gBAAN;AACD;AACF,GARD,EASCiB,IATD,CASM,UAACjB,IAAD,EAAU;AACd;AACA,SAAK,IAAIY,IAAT,IAAgBF,QAAhB,EAA0B;AACxB,UAAIA,SAASE,IAAT,MAAkBC,SAAtB,EAAiC;AAC/B,eAAOH,SAASE,IAAT,CAAP;AACD;AACF;AACD,WAAO,IAAI,iBAAME,IAAV,CAAe,EAACT,IAAIL,KAAKK,EAAV,EAAf,EAA8Ba,IAA9B,CAAmCR,QAAnC,CAAP;AACD,GAjBD,EAkBCO,IAlBD,CAkBM,UAACE,IAAD,EAAU;AACdA,WAAOA,KAAKC,MAAL,EAAP;AACAjB,QAAIkB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBH,IAArB;AACD,GArBD,EAsBCI,KAtBD,CAsBO,UAACC,GAAD;AAAA,WAAS,yCAAyCA,GAAlD;AAAA,GAtBP;AAuBD,CApDD;;kBAsDexB,I","file":"api/user.js","sourcesContent":["import model from \"../db/models\";\nimport collection from \"../db/collections\";\n\n/* Update user detail in 'user' table */\n/* Post Data: userPhoto(publicId from Cloudinary), username, password, email */\nconst user = (user, q, body, res) => {\n  const userId = user.id;\n  const { userPhoto, username, password, email } = body;\n\n  // Test code below\n  // let userId;\n  // if (user && user.id) {\n  //   userId = user.id;\n  // }\n  // if (q && q.id) {\n  //   userId = q.id;\n  // } else {\n  //   userId = 1;\n  // }\n\n  const editData = {\n    photo: userPhoto,\n    username: username,\n    password: password,\n    email: email\n  };\n\n  /* Delete keys with undefined value */\n  for (let key in editData) {\n    if (editData[key] === undefined) {\n      delete editData[key];\n    }\n  }\n\n  model.User.where(\"id\", userId).fetch()\n  .then((user) => {\n    if (user) {\n      return user;\n    } else {\n      /* Throw error if there is now user matching */\n      throw \"Invalid userId\";\n    }\n  })\n  .then((user) => {\n    /* check for empty property */\n    for (let key in editData) {\n      if (editData[key] === undefined) {\n        delete editData[key];\n      }\n    }\n    return new model.User({id: user.id}).save(editData);\n  })\n  .then((data) => {\n    data = data.toJSON();\n    res.status(200).send(data);\n  })\n  .catch((err) => \"Error: Failed to edit user profile: \" + err);\n};\n\nexport default user;\n"],"sourceRoot":"/source/"}
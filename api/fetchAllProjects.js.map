{"version":3,"sources":["api/fetchAllProjects.js"],"names":["fetchAllProjects","user","q","res","userId","id","today","Date","UserProject","where","fetchAll","withRelated","then","userProjects","result","waiting","onGoing","complete","forEach","userProject","toJSON","data","title","project","description","image","startAt","endAt","success","diff","valueOf","Math","ceil","onDay","doneToday","posts","item","day","push","status","send","catch","err","console","error","end"],"mappings":";;;;;;AAAA;;;;AACA;;;;;;AAEA;AACA;;AAEA,IAAMA,mBAAmB,SAAnBA,gBAAmB,CAACC,IAAD,EAAOC,CAAP,EAAUC,GAAV,EAAgB;AACvC,MAAMC,SAASH,KAAKI,EAApB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,QAAQ,IAAIC,IAAJ,EAAd;;AAEA,mBAAMC,WAAN,CAAkBC,KAAlB,CAAwB,QAAxB,EAAkCL,MAAlC,EAA0CM,QAA1C,CAAmD,EAACC,aAAa,CAC/D,SAD+D,EAE/D,OAF+D,CAAd,EAAnD,EAICC,IAJD,CAIM,UAACC,YAAD,EAAgB;AACpB,QAAMC,SAAS;AACbC,eAAS,EADI;AAEbC,eAAS,EAFI;AAGbC,gBAAU;AAHG,KAAf;;AAMAJ,iBAAaK,OAAb,CAAqB,UAACC,WAAD,EAAe;AAClCA,oBAAcA,YAAYC,MAAZ,EAAd;AACA,UAAIC,OAAO;AACThB,YAAIc,YAAYd,EADP;AAETiB,eAAOH,YAAYI,OAAZ,CAAoBD,KAFlB;AAGTE,qBAAaL,YAAYI,OAAZ,CAAoBC,WAHxB;AAITC,eAAON,YAAYI,OAAZ,CAAoBE,KAJlB;AAKTC,iBAASP,YAAYO,OALZ;AAMTC,eAAOR,YAAYQ,KANV;AAOTC,iBAAST,YAAYS;AAPZ,OAAX;;AAUA;AACA,UAAIF,UAAU,IAAInB,IAAJ,CAASY,YAAYO,OAArB,CAAd;AACA;AACA,UAAIG,OAAOvB,MAAMwB,OAAN,KAAkBJ,QAAQI,OAAR,EAA7B;AACAD,aAAOE,KAAKC,IAAL,CAAUH,QAAQ,KAAK,EAAL,GAAU,EAAV,GAAe,IAAvB,CAAV,CAAP;AACA,UAAKA,OAAO,CAAP,IAAYA,QAAQ,CAApB,IAAyB,CAACR,KAAKO,OAApC,EAA4C;AAC1CP,aAAKY,KAAL,GAAaJ,IAAb;AACAR,aAAKa,SAAL,GAAiB,KAAjB;AACAf,oBAAYgB,KAAZ,CAAkBjB,OAAlB,CAA0B,UAACkB,IAAD,EAAQ;AAChC,cAAGA,KAAKC,GAAL,KAAaR,IAAhB,EAAqB;AACnBR,iBAAKa,SAAL,GAAiB,IAAjB;AACD;AACF,SAJD;AAKApB,eAAOE,OAAP,CAAesB,IAAf,CAAoBjB,IAApB;AACD,OATD,MASO,IAAKQ,QAAQ,CAAb,EAAgB;AACrBR,aAAKY,KAAL,GAAaJ,IAAb;AACAf,eAAOC,OAAP,CAAeuB,IAAf,CAAoBjB,IAApB;AACD,OAHM,MAGA;AACLP,eAAOG,QAAP,CAAgBqB,IAAhB,CAAqBjB,IAArB;AACD;AACF,KAhCD;;AAkCA,WAAOP,MAAP;AACD,GA9CD,EA+CCF,IA/CD,CA+CM,UAACS,IAAD,EAAU;AACdlB,QAAIoC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBnB,IAArB;AACD,GAjDD,EAkDCoB,KAlDD,CAkDO,UAACC,GAAD,EAAQ;AACbC,YAAQC,KAAR,CAAc,2DAAd,EAA2EF,GAA3E;AACAvC,QAAIoC,MAAJ,CAAW,GAAX,EAAgBM,GAAhB;AACD,GArDD;AAuDD,CAvED;;kBAyEe7C,gB","file":"api/fetchAllProjects.js","sourcesContent":["import model from \"../db/models\";\nimport collection from \"../db/collections\";\n\n/* Fetch all projects from 'userProject' table */\n/* Query: none */\n\nconst fetchAllProjects = (user, q, res)=>{\n  const userId = user.id;\n\n  // Test code below\n  // let userId;\n  // if (user && user.id) {\n  //   userId = user.id;\n  // }\n  // if (q && q.id) {\n  //   userId = q.id;\n  // } else {\n  //   userId = 1;\n  // }\n\n  const today = new Date();\n\n  model.UserProject.where(\"userId\", userId).fetchAll({withRelated: [\n    \"project\",\n    \"posts\"\n  ]})\n  .then((userProjects)=>{\n    const result = {\n      waiting: [],\n      onGoing: [],\n      complete: []\n    };\n\n    userProjects.forEach((userProject)=>{\n      userProject = userProject.toJSON();\n      let data = {\n        id: userProject.id,\n        title: userProject.project.title,\n        description: userProject.project.description,\n        image: userProject.project.image,\n        startAt: userProject.startAt,\n        endAt: userProject.endAt,\n        success: userProject.success\n      };\n\n      /* Check Project status */\n      let startAt = new Date(userProject.startAt);\n      /* Calculate diff, the difference between today and the start Date */\n      let diff = today.valueOf() - startAt.valueOf();\n      diff = Math.ceil(diff / (60 * 60 * 24 * 1000));\n      if ( diff > 0 && diff <= 7 && !data.success){\n        data.onDay = diff;\n        data.doneToday = false;\n        userProject.posts.forEach((item)=>{\n          if(item.day === diff){\n            data.doneToday = true;\n          }\n        });\n        result.onGoing.push(data);\n      } else if ( diff <= 0 ){\n        data.onDay = diff;\n        result.waiting.push(data);\n      } else {\n        result.complete.push(data);\n      }\n    });\n\n    return result;\n  })\n  .then((data) => {\n    res.status(200).send(data);\n  })\n  .catch((err) =>{\n    console.error(\"Error: Failed to read projects in 'fetchAllProjects.js': \", err);\n    res.status(500).end();\n  });\n\n};\n\nexport default fetchAllProjects;\n"],"sourceRoot":"/source/"}
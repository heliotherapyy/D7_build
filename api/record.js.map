{"version":3,"sources":["api/record.js"],"names":["record","user","q","body","res","userId","id","onDay","text","publicIds","newProject","data","projectId","undefined","userProjectId","day","createNewProjectPromise","resolve","reject","parsedNewProject","JSON","parse","then","project","map","publicId","index","url","newUserProject","UserProject","where","fetch","userProject","toJSON","Post","forge","set","save","post","forEach","postId","length","knex","insert","into","catch","err","console","error","postDate","Date","created_at","slice","endDate","endAt","log","Transaction","transaction","customer_uid","merchant_uid","answer","doneCancelPayment","refund","success","status","send","end"],"mappings":"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","file":"api/record.js","sourcesContent":["import model from \"../db/models\";\nimport collection from \"../db/collections\";\nimport db from \"../db/config/setConfig\";\nimport createNewProject from \"./createNewProject\";\nimport paymentCancelReq from \"./paymentCancel\";\nimport Promise from \"bluebird\";\n\n/* Create new post in 'post' table and if the req has new Project, create new project in 'project' table first */\n/* Post Data: id, onDay, text, publicIds(array), newProject(object) */\n\nconst record = (user, q, body, res) => {\n  const userId = user.id;\n\n  // Test code below\n  // let userId;\n  // if (user && user.id) {\n  //   userId = user.id;\n  // }\n  // if (q && q.id) {\n  //   userId = q.id;\n  // } else {\n  //   userId = 1;\n  // }\n\n  let { id, onDay, text, publicIds, newProject } = body;\n  const data = {\n    userId: userId,\n    projectId: undefined,\n    userProjectId: id,\n    day: onDay,\n    text: text\n  };\n\n  /* If newProject is sent with record data, */\n  /* create newProject first before record dayDetail */\n  let createNewProjectPromise = () => {\n    return new Promise((resolve, reject) => {\n      resolve();\n    });\n  };\n  if ((id === undefined || id === null) && newProject) {\n    createNewProjectPromise = () => {\n      const parsedNewProject = JSON.parse(newProject);\n      return new Promise.resolve(createNewProject(user, q, parsedNewProject, null))\n      .then((project) => {\n        return project;\n      });\n    };\n  }\n\n  /* Parse and rearrange 'publicIds' array */\n  publicIds = JSON.parse(publicIds).map((publicId, index) => {\n    return {index: index, url: publicId};\n  });\n\n  createNewProjectPromise()\n  .then((newUserProject) => {\n    /* check if newProject is sent, and if so */\n    /* assign 'newProject.id' to 'id' */\n    if (newUserProject) {\n      id = newUserProject.id;\n      data.userProjectId = id;\n    }\n    return model.UserProject.where(\"id\", id).fetch();\n  })\n  .then((userProject) => {\n    userProject = userProject.toJSON();\n    data.projectId = userProject.projectId;\n    return model.Post.forge().set(data).save()\n    .then((post) => post);\n  })\n  .then((post) => {\n    publicIds.forEach((publicId) => {\n      publicId.postId = post.id;\n    });\n    /* check if the length of publicIds array is 0 */\n    /* if 0, do not execute knex.insert, or it will print out error like below */\n    /* { Error:  - SQLITE_MISUSE: not an error at Error (native) errno: 21, code: 'SQLITE_MISUSE' } */\n    if (publicIds.length < 1) {\n      return post;\n    } else {\n      return db.knex.insert(publicIds).into(\"postImage\")\n        .then(() => {\n          return post;\n        })\n        .catch((err) => console.error(\"Error: Failed to store postImages in db in 'record.js': \", err));\n    }\n  })\n  .then((post) => {\n    // console.log(\"----------post here is 111\", post);\n    post = post.toJSON();\n    return model.UserProject.where({id: post.userProjectId}).fetch()\n    .then((userProject) => {\n      userProject = userProject.toJSON();\n      let postDate = new Date(post.created_at).toJSON().slice(0, 10);\n      let endDate = userProject.endAt;\n      console.log(\"postdate and enddate\", postDate, endDate);\n      /* check if the date of posting is same with endDate of the userProject */\n      /* and if so, update success col of userProject, from false to true */\n      if (postDate === endDate) {\n        return model.Transaction.where({userProjectId: post.userProjectId}).fetch()\n        .then((transaction) => {\n          transaction = transaction.toJSON();\n          const body = {\n            customer_uid: transaction.customer_uid,\n            merchant_uid: transaction.merchant_uid\n          };\n          return paymentCancelReq(null, null, body, null)\n          .then((answer) => {\n            post.doneCancelPayment = true;\n          });\n        })\n        .then(() => {\n          return new model.Transaction({userProjectId: post.userProjectId}).save({refund: true});\n        })\n        .then(() => {\n          return new model.UserProject({id: post.userProjectId}).save({success: true});\n        })\n        .then(() => {\n          return post;\n        })\n        .catch((err) => {\n          console.error(\"Error: Failed to change userProject S/U status in 'record.js': \", err);\n          return err;\n        });\n      } else {\n        return post;\n      }\n    });\n  })\n  .then((data) => {\n    res.status(200).send(data);\n  })\n  .catch((err) => {\n    console.error(\"Error: Failed to store dayDetail in db in 'record.js': \", err);\n    res.status(500).end();\n  });\n};\n\nexport default record;\n"],"sourceRoot":"/source/"}
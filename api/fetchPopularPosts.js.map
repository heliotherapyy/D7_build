{"version":3,"sources":["api/fetchPopularPosts.js"],"names":["fetchPopularPosts","user","q","res","userId","id","page","Post","forge","orderBy","fetchPage","pageSize","withRelated","then","posts","toJSON","postsPromiseArray","forEach","post","postPromise","resolve","reject","username","userPhoto","photo","doneLike","likes","like","doneReport","reports","report","postImages","newPostImages","postImage","index","url","publicIds","createdAt","created_at","updatedAt","updated_at","UserProject","where","userProjectId","fetch","userProject","projectTitle","project","title","projectDescription","description","catch","err","console","error","push","all","data","status","send","end"],"mappings":"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","file":"api/fetchPopularPosts.js","sourcesContent":["import model from \"../db/models\";\nimport collection from \"../db/collections\";\nimport Promise from \"bluebird\";\n\n/* Fetch all post in 'likeCount' desc order from 'post' table */\n/* Query: page */\n\nconst fetchPopularPosts = (user, q, res)=>{\n  const userId = user.id;\n  const { page } = q;\n\n  // Test code below\n  // let userId;\n  // if (user && user.id) {\n  //   userId = user.id;\n  // }\n  // if (q && q.id) {\n  //   userId = q.id;\n  // } else {\n  //   userId = 1;\n  // }\n\n  /* Start point */\n  model.Post.forge().orderBy(\"-likeCount\").fetchPage({\n    pageSize: 20,\n    page: page,\n    withRelated: [\n      \"user\",\n      \"userProject\",\n      \"postImages\",\n      \"likes\",\n      \"reports\"\n    ]\n  })\n  .then((posts)=>{\n    posts = posts.toJSON();\n\n    /* Array of Promises to be 'Promise.all'ed */\n    const postsPromiseArray = [];\n\n    posts.forEach((post) => {\n      /* make thenable promise object */\n      let postPromise = new Promise((resolve, reject) => {\n        /* userId, username */\n        post.username = post.user.username;\n        post.userPhoto = post.user.photo;\n        delete post.user;\n\n        /* postId */\n        // post.postId = post.id;\n\n        /* userProjectId*/\n        /* like */\n        post.doneLike = false;\n        post.likes.forEach((like) => {\n          if (like.userId === userId) {\n            post.doneLike = true;\n          }\n        });\n        delete post.likes;\n\n        /* report */\n        post.doneReport = false;\n        post.reports.forEach((report) => {\n          if (report.userId === userId) {\n            post.doneReport = true;\n          }\n        });\n        delete post.reports;\n\n        /* text, picture */\n        let postImages = post.postImages;\n        let newPostImages = [];\n        postImages.forEach((postImage) => {\n          newPostImages[postImage.index] = postImage.url;\n        });\n        post.publicIds = newPostImages;\n        delete post.postImages;\n\n        /* created_at, updated_at */\n        post.createdAt = post.created_at;\n        post.updatedAt = post.updated_at;\n        delete post.created_at;\n        delete post.updated_at;\n\n        /* project title, description*/\n        model.UserProject.where(\"id\", post.userProjectId).fetch({withRelated: [\"project\"]})\n        .then((userProject) => {\n          userProject = userProject.toJSON();\n          post.projectTitle = userProject.project.title;\n          post.projectDescription = userProject.project.description;\n        })\n        .then(() => {\n          delete post.userProject;\n          resolve();\n        })\n        .catch((err) => {\n          console.error(\"Error: Failed to read userProject data in 'fetchPopularPosts.js': \", err);\n          return err;\n        });\n      });\n      postsPromiseArray.push(postPromise);\n    });\n\n    return Promise.all(postsPromiseArray)\n    .then(() => {\n      return posts;\n    });\n  })\n  .then((data) => res.status(200).send(data))\n  .catch((err) =>{\n    console.error(\"Error: Failed to read projects in 'fetchPopularPosts.js': \", err);\n    res.status(500).end();\n  });\n\n};\n\nexport default fetchPopularPosts;\n"],"sourceRoot":"/source/"}
{"version":3,"sources":["api/fetchUserProjectDetail.js"],"names":["fetchUserProjectDetail","user","q","res","userId","id","userProjectId","result","UserProject","where","fetch","withRelated","then","userProject","toJSON","projectId","project","projectTitle","title","projectDescription","description","wishCount","username","userPhoto","photo","startAt","endAt","success","status","today","Date","diff","valueOf","Math","ceil","onDay","doneToday","posts","forEach","item","day","others","transaction","amount","currency","paymentDue","Post","fetchAll","postsPromiseArray","post","postPromise","Promise","resolve","reject","doneLike","likes","like","doneReport","reports","report","postImages","newPostImages","postImage","index","url","publicIds","createdAt","created_at","catch","err","console","error","push","all","doneWish","Wish","wishes","data","send","end"],"mappings":";;;;;;AAAA;;;;AACA;;;;;;AAEA;AACA;;AAEA,IAAMA,yBAAyB,SAAzBA,sBAAyB,CAACC,IAAD,EAAOC,CAAP,EAAUC,GAAV,EAAgB;AAC7C,MAAMC,SAASH,KAAKI,EAApB;AAD6C,MAEvCC,aAFuC,GAErBJ,CAFqB,CAEvCI,aAFuC;;AAI7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AACA,MAAMC,SAAS,EAAf;;AAEA;AACA,mBAAMC,WAAN,CAAkBC,KAAlB,CAAwB,IAAxB,EAA8BH,aAA9B,EAA6CI,KAA7C,CAAmD,EAACC,aAAa,CAC/D,MAD+D,EAE/D,SAF+D,EAG/D,OAH+D,EAI/D,aAJ+D,CAAd,EAAnD,EAMCC,IAND,CAMM,UAACC,WAAD,EAAiB;AACrBA,kBAAcA,YAAYC,MAAZ,EAAd;;AAEA;AACAP,WAAOD,aAAP,GAAuBO,YAAYR,EAAnC;;AAEA;AACAE,WAAOQ,SAAP,GAAmBF,YAAYG,OAAZ,CAAoBX,EAAvC;AACAE,WAAOU,YAAP,GAAsBJ,YAAYG,OAAZ,CAAoBE,KAA1C;AACAX,WAAOY,kBAAP,GAA4BN,YAAYG,OAAZ,CAAoBI,WAAhD;AACAb,WAAOc,SAAP,GAAmBR,YAAYG,OAAZ,CAAoBK,SAAvC;;AAEA;AACAd,WAAOH,MAAP,GAAgBS,YAAYZ,IAAZ,CAAiBI,EAAjC;AACAE,WAAOe,QAAP,GAAkBT,YAAYZ,IAAZ,CAAiBqB,QAAnC;AACAf,WAAOgB,SAAP,GAAmBV,YAAYZ,IAAZ,CAAiBuB,KAApC;;AAEA;AACAjB,WAAOkB,OAAP,GAAiBZ,YAAYY,OAA7B;AACAlB,WAAOmB,KAAP,GAAeb,YAAYa,KAA3B;;AAEA;AACA,QAAIb,YAAYc,OAAhB,EAAyB;AACvB;AACApB,aAAOqB,MAAP,GAAgB,SAAhB;AACD,KAHD,MAGO;AAAA;AACL;AACA,YAAMC,QAAQ,IAAIC,IAAJ,EAAd;AACA,YAAML,UAAU,IAAIK,IAAJ,CAASjB,YAAYY,OAArB,CAAhB;AACA,YAAIM,OAAOF,MAAMG,OAAN,KAAkBP,QAAQO,OAAR,EAA7B;AACAD,eAAOE,KAAKC,IAAL,CAAUH,QAAQ,KAAK,EAAL,GAAU,EAAV,GAAe,IAAvB,CAAV,CAAP;AACA,YAAIA,OAAO,CAAP,IAAYA,QAAQ,CAAxB,EAA2B;AACzBxB,iBAAOqB,MAAP,GAAgB,SAAhB;AACArB,iBAAO4B,KAAP,GAAeJ,IAAf;AACAxB,iBAAO6B,SAAP,GAAmB,KAAnB;AACAvB,sBAAYwB,KAAZ,CAAkBC,OAAlB,CAA0B,UAACC,IAAD,EAAU;AAClC,gBAAIA,KAAKC,GAAL,KAAaT,IAAjB,EAAuB;AACrBxB,qBAAO6B,SAAP,GAAmB,IAAnB;AACD;AACF,WAJD;AAKD,SATD,MASO,IAAIL,QAAQ,CAAZ,EAAe;AACpBxB,iBAAOqB,MAAP,GAAgB,SAAhB;AACArB,iBAAO4B,KAAP,GAAeJ,IAAf;AACD,SAHM,MAGA;AACLxB,iBAAOqB,MAAP,GAAgB,QAAhB;AACD;AApBI;AAqBN;;AAED;AACArB,WAAOc,SAAP,GAAmBR,YAAYG,OAAZ,CAAoBK,SAAvC;;AAEA;AACA;AACA,QAAIjB,WAAWG,OAAOH,MAAtB,EAA8B;AAC5BG,aAAOkC,MAAP,GAAgB,KAAhB;AACAlC,aAAOmC,WAAP,GAAqB;AACnBC,gBAAQ9B,YAAY6B,WAAZ,CAAwBC,MADb;AAEnBC,kBAAU/B,YAAY6B,WAAZ,CAAwBE,QAFf;AAGnBC,oBAAYhC,YAAY6B,WAAZ,CAAwBG;AAHjB,OAArB;AAKD,KAPD,MAOO;AACLtC,aAAOkC,MAAP,GAAgB,IAAhB;AACD;AACF,GArED,EAsEC7B,IAtED,CAsEM,YAAM;AACV;AACA,WAAO,iBAAMkC,IAAN,CAAWrC,KAAX,CAAiB,EAACH,eAAeA,aAAhB,EAAjB,EAAiDyC,QAAjD,CAA0D,EAACpC,aAAa,CAC7E,MAD6E,EAE7E,YAF6E,EAG7E,OAH6E,EAI7E,SAJ6E,CAAd,EAA1D,CAAP;AAMD,GA9ED,EA+ECC,IA/ED,CA+EM,UAACyB,KAAD,EAAW;AACfA,YAAQA,MAAMvB,MAAN,EAAR;AACAP,WAAO8B,KAAP,GAAeA,KAAf;AACA,QAAI,CAACA,KAAL,EAAY;AACVA,cAAQ,EAAR;AACD;;AAED;AACA,QAAMW,oBAAoB,EAA1B;;AAEAX,UAAMC,OAAN,CAAc,UAACW,IAAD,EAAU;AACtB;AACA,UAAIC,cAAc,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACjD;AACAJ,aAAK3B,QAAL,GAAgB2B,KAAKhD,IAAL,CAAUqB,QAA1B;AACA2B,aAAK1B,SAAL,GAAiB0B,KAAKhD,IAAL,CAAUuB,KAA3B;AACA,eAAOyB,KAAKhD,IAAZ;;AAEA;AACA;;AAEA;AACA;AACAgD,aAAKK,QAAL,GAAgB,KAAhB;AACAL,aAAKM,KAAL,CAAWjB,OAAX,CAAmB,UAACkB,IAAD,EAAU;AAC3B,cAAIA,KAAKpD,MAAL,KAAgBA,MAApB,EAA4B;AAC1B6C,iBAAKK,QAAL,GAAgB,IAAhB;AACD;AACF,SAJD;AAKA,eAAOL,KAAKM,KAAZ;;AAEA;AACAN,aAAKQ,UAAL,GAAkB,KAAlB;AACAR,aAAKS,OAAL,CAAapB,OAAb,CAAqB,UAACqB,MAAD,EAAY;AAC/B,cAAIA,OAAOvD,MAAP,KAAkBA,MAAtB,EAA8B;AAC5B6C,iBAAKQ,UAAL,GAAkB,IAAlB;AACD;AACF,SAJD;AAKA,eAAOR,KAAKS,OAAZ;;AAEA;AACA,YAAIE,aAAaX,KAAKW,UAAtB;AACA,YAAIC,gBAAgB,EAApB;AACAD,mBAAWtB,OAAX,CAAmB,UAACwB,SAAD,EAAe;AAChCD,wBAAcC,UAAUC,KAAxB,IAAiCD,UAAUE,GAA3C;AACD,SAFD;AAGAf,aAAKgB,SAAL,GAAiBJ,aAAjB;AACA,eAAOZ,KAAKW,UAAZ;;AAEA;AACAX,aAAKiB,SAAL,GAAiBjB,KAAKkB,UAAtB;AACA,eAAOlB,KAAKkB,UAAZ;;AAEA;AACA,yBAAM3D,WAAN,CAAkBC,KAAlB,CAAwB,IAAxB,EAA8BwC,KAAK3C,aAAnC,EAAkDI,KAAlD,CAAwD,EAACC,aAAa,CAAC,SAAD,CAAd,EAAxD,EACCC,IADD,CACM,UAACC,WAAD,EAAiB;AACrBA,wBAAcA,YAAYC,MAAZ,EAAd;AACAmC,eAAKhC,YAAL,GAAoBJ,YAAYG,OAAZ,CAAoBE,KAAxC;AACA+B,eAAK9B,kBAAL,GAA0BN,YAAYG,OAAZ,CAAoBI,WAA9C;AACD,SALD,EAMCR,IAND,CAMM,YAAM;AACV,iBAAOqC,KAAKpC,WAAZ;AACAuC;AACD,SATD,EAUCgB,KAVD,CAUO,UAACC,GAAD,EAAS;AACdC,kBAAQC,KAAR,CAAc,2DAAd,EAA2EF,GAA3E;AACA,iBAAOA,GAAP;AACD,SAbD;AAcD,OAxDiB,CAAlB;AAyDArB,wBAAkBwB,IAAlB,CAAuBtB,WAAvB;AACD,KA5DD;;AA8DA,WAAOC,QAAQsB,GAAR,CAAYzB,iBAAZ,EACNpC,IADM,CACD,YAAM;AACV,aAAOyB,KAAP;AACD,KAHM,CAAP;AAID,GA3JD,EA4JCzB,IA5JD,CA4JM,YAAM;AACV;AACAL,WAAOmE,QAAP,GAAkB,KAAlB;AACA,WAAO,iBAAMC,IAAN,CAAWlE,KAAX,CAAiB,EAACL,QAAQA,MAAT,EAAiBW,WAAWR,OAAOQ,SAAnC,EAAjB,EAAgEL,KAAhE,GACNE,IADM,CACD,UAACgE,MAAD,EAAY;AAChB,UAAI,CAACA,MAAL,EAAa;AACXrE,eAAOmE,QAAP,GAAkB,IAAlB;AACD;AACF,KALM,EAMNN,KANM,CAMA,UAACC,GAAD;AAAA,aAAS,+BAA+BA,GAAxC;AAAA,KANA,CAAP;AAOD,GAtKD,EAuKCzD,IAvKD,CAuKM,YAAM;AACV,WAAOL,MAAP;AACD,GAzKD,EA0KCK,IA1KD,CA0KM,UAACiE,IAAD;AAAA,WAAU1E,IAAIyB,MAAJ,CAAW,GAAX,EAAgBkD,IAAhB,CAAqBD,IAArB,CAAV;AAAA,GA1KN,EA2KCT,KA3KD,CA2KO,UAACC,GAAD,EAAQ;AACbC,YAAQC,KAAR,CAAc,wDAAd,EAAwEF,GAAxE;AACAlE,QAAIyB,MAAJ,CAAW,GAAX,EAAgBmD,GAAhB;AACD,GA9KD;AAgLD,CAnMD;;kBAqMe/E,sB","file":"api/fetchUserProjectDetail.js","sourcesContent":["import model from \"../db/models\";\nimport collection from \"../db/collections\";\n\n/* Fetch userProject details from 'userProject' table */\n/* Query: userProjectId */\n\nconst fetchUserProjectDetail = (user, q, res)=>{\n  const userId = user.id;\n  var { userProjectId } = q;\n\n  // Test code below\n  // let userId;\n  // if (user && user.id) {\n  //   userId = user.id;\n  // }\n  // if (q && q.id) {\n  //   userId = q.id;\n  // } else {\n  //   userId = 1;\n  // }\n\n  /* data container to send */\n  const result = {};\n\n  /* Start point */\n  model.UserProject.where(\"id\", userProjectId).fetch({withRelated: [\n    \"user\",\n    \"project\",\n    \"posts\",\n    \"transaction\"\n  ]})\n  .then((userProject) => {\n    userProject = userProject.toJSON();\n\n    /* userProject id */\n    result.userProjectId = userProject.id;\n\n    /* project id, title, description, wishCount */\n    result.projectId = userProject.project.id;\n    result.projectTitle = userProject.project.title;\n    result.projectDescription = userProject.project.description;\n    result.wishCount = userProject.project.wishCount;\n\n    /* username, userId, photo */\n    result.userId = userProject.user.id;\n    result.username = userProject.user.username;\n    result.userPhoto = userProject.user.photo;\n\n    /* startAt, endAt */\n    result.startAt = userProject.startAt;\n    result.endAt = userProject.endAt;\n\n    /* status : ongoing(+doneToday), waiting, complete /and/ onDay */\n    if (userProject.success) {\n      /* success case */\n      result.status = \"success\";\n    } else {\n      /* fail, ongoing, waiting case */\n      const today = new Date();\n      const startAt = new Date(userProject.startAt);\n      let diff = today.valueOf() - startAt.valueOf();\n      diff = Math.ceil(diff / (60 * 60 * 24 * 1000));\n      if (diff > 0 && diff <= 7) {\n        result.status = \"ongoing\";\n        result.onDay = diff;\n        result.doneToday = false;\n        userProject.posts.forEach((item) => {\n          if (item.day === diff) {\n            result.doneToday = true;\n          }\n        });\n      } else if (diff <= 0) {\n        result.status = \"waiting\";\n        result.onDay = diff;\n      } else {\n        result.status = \"failed\";\n      }\n    }\n\n    /* wishcount */\n    result.wishCount = userProject.project.wishCount;\n\n    /* transaction : amount, currency, paymentDue */\n    /* only if session's user.id === userProject.user.id */\n    if (userId === result.userId) {\n      result.others = false;\n      result.transaction = {\n        amount: userProject.transaction.amount,\n        currency: userProject.transaction.currency,\n        paymentDue: userProject.transaction.paymentDue\n      };\n    } else {\n      result.others = true;\n    }\n  })\n  .then(() => {\n    /* posts + doneLike */\n    return model.Post.where({userProjectId: userProjectId}).fetchAll({withRelated: [\n      \"user\",\n      \"postImages\",\n      \"likes\",\n      \"reports\"\n    ]});\n  })\n  .then((posts) => {\n    posts = posts.toJSON();\n    result.posts = posts;\n    if (!posts) {\n      posts = [];\n    }\n\n    /* Array of Promises to be 'Promise.all'ed */\n    const postsPromiseArray = [];\n\n    posts.forEach((post) => {\n      /* make thenable promise object */\n      let postPromise = new Promise((resolve, reject) => {\n        /* userId, username */\n        post.username = post.user.username;\n        post.userPhoto = post.user.photo;\n        delete post.user;\n\n        /* postId */\n        // post.postId = post.id;\n\n        /* userProjectId*/\n        /* doneLike */\n        post.doneLike = false;\n        post.likes.forEach((like) => {\n          if (like.userId === userId) {\n            post.doneLike = true;\n          }\n        });\n        delete post.likes;\n\n        /* report */\n        post.doneReport = false;\n        post.reports.forEach((report) => {\n          if (report.userId === userId) {\n            post.doneReport = true;\n          }\n        });\n        delete post.reports;\n\n        /* text, picture */\n        let postImages = post.postImages;\n        let newPostImages = [];\n        postImages.forEach((postImage) => {\n          newPostImages[postImage.index] = postImage.url;\n        });\n        post.publicIds = newPostImages;\n        delete post.postImages;\n\n        /* created_at */\n        post.createdAt = post.created_at;\n        delete post.created_at;\n\n        /* project title, description */\n        model.UserProject.where(\"id\", post.userProjectId).fetch({withRelated: [\"project\"]})\n        .then((userProject) => {\n          userProject = userProject.toJSON();\n          post.projectTitle = userProject.project.title;\n          post.projectDescription = userProject.project.description;\n        })\n        .then(() => {\n          delete post.userProject;\n          resolve();\n        })\n        .catch((err) => {\n          console.error(\"Error: Failed to read userProject data in fetchAllPosts: \", err);\n          return err;\n        });\n      });\n      postsPromiseArray.push(postPromise);\n    });\n\n    return Promise.all(postsPromiseArray)\n    .then(() => {\n      return posts;\n    });\n  })\n  .then(() => {\n    /* doneWish */\n    result.doneWish = false;\n    return model.Wish.where({userId: userId, projectId: result.projectId}).fetch()\n    .then((wishes) => {\n      if (!wishes) {\n        result.doneWish = true;\n      }\n    })\n    .catch((err) => \"Failed to print doneWish: \" + err);\n  })\n  .then(() => {\n    return result;\n  })\n  .then((data) => res.status(200).send(data))\n  .catch((err) =>{\n    console.error(\"Error: Failed to read projects in 'fetchAllPosts.js': \", err);\n    res.status(500).end();\n  });\n\n};\n\nexport default fetchUserProjectDetail;\n"],"sourceRoot":"/source/"}
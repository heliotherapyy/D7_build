{"version":3,"sources":["api/fetchUser.js"],"names":["fetchUser","user","q","res","userId","id","User","where","fetch","withRelated","then","toJSON","projectCountData","success","fail","ongoing","waiting","total","today","Date","slice","userProjects","forEach","project","startAt","diff","valueOf","Math","ceil","console","log","userPhoto","photo","password","transactionData","transactionPromiseArray","transactions","sort","a","b","aSec","paymentDue","bSec","trans","transData","dueDate","transPromise","resolve","reject","date","amount","status","currency","projectTitle","undefined","UserProject","userProjectId","userProject","title","push","catch","err","error","all","data","send"],"mappings":"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","file":"api/fetchUser.js","sourcesContent":["import model from \"../db/models\";\nimport collection from \"../db/collections\";\nimport Promise from \"bluebird\";\n\n/* Fetch user details in from 'user' table */\n/* Query: none */\n\nconst fetchUser = (user, q, res) => {\n  const userId = user.id;\n\n  // Test code below\n  // let userId;\n  // if (user && user.id) {\n  //   userId = user.id;\n  // }\n  // if (q && q.id) {\n  //   userId = q.id;\n  // } else {\n  //   userId = 1;\n  // }\n\n  /* Start point */\n  model.User.where({id: userId}).fetch({withRelated: [\"userProjects\", \"transactions\"]})\n  .then((user) => {\n    user = user.toJSON();\n\n    /* userProject counts */\n    const projectCountData = {\n      success: 0,\n      fail: 0,\n      ongoing: 0,\n      waiting: 0,\n      total: 0\n    };\n\n    const today = new Date(new Date().toJSON().slice(0, 10));\n    user.userProjects.forEach((project) => {\n      projectCountData.total++;\n      if (project.success) {\n        projectCountData.success++;\n      } else {\n        const startAt = new Date(project.startAt);\n        let diff = today.valueOf() - startAt.valueOf();\n        diff = Math.ceil(diff / (60 * 60 * 24 * 1000));\n        console.log(\"diff is \", diff);\n        if (diff > 0 && diff <= 7) {\n          projectCountData.ongoing++;\n        } else if (diff > 7) {\n          projectCountData.fail++;\n        } else {\n          projectCountData.waiting++;\n        }\n      }\n    });\n    user.userProjects = projectCountData;\n\n    /* userPhoto */\n    user.userPhoto = user.photo;\n    delete user.photo;\n\n    /* password -> delete */\n    delete user.password;\n\n    /* Transaction data */\n    const transactionData = [];\n    /* Array of Promises to be 'Promise.all'ed */\n    const transactionPromiseArray = [];\n\n    // user.transaction = transactionData;\n    user.transactions.sort((a, b) => {\n      let aSec = new Date(a.paymentDue).valueOf();\n      let bSec = new Date(b.paymentDue).valueOf();\n      return bSec - aSec;\n    });\n\n    user.transactions.forEach((trans) => {\n      /* Each transaction datum is storedin transData and pushed to 'transactionData' */\n      const transData = {};\n      const dueDate = new Date(trans.paymentDue);\n      /* diff is the difference between today and the payment due date */\n      const diff = dueDate.valueOf() - today.valueOf();\n      if (diff < 0) {\n        const transPromise = new Promise((resolve, reject) => {\n          transData.date = dueDate.toJSON().slice(0, 10);\n          transData.amount = trans.amount;\n          transData.status = \"paid\";\n          transData.currency = trans.currency;\n          transData.projectTitle = undefined;\n          transData.id = trans.id;\n          console.log(\"transdata is \", transData);\n          \n          /* project title */\n          /* Fetch userProject details from 'userProject' table */\n          model.UserProject.where(\"id\", trans.userProjectId).fetch({withRelated: [\"project\"]})\n          .then((userProject) => {\n            userProject = userProject.toJSON();\n            transData.projectTitle = userProject.project.title;\n            if (userProject.success) {\n              transData.status = \"refunded\";\n            }\n            transactionData.push(transData);\n            resolve();\n          })\n          .catch((err) => {\n            console.error(\"Error: Failed to read userProject data in 'fetchUser.js': \", err);\n            resolve();\n          });\n        });\n        transactionPromiseArray.push(transPromise);\n      }\n    });\n\n    return Promise.all(transactionPromiseArray)\n    .then(() => {\n      user.transactions = transactionData;\n      return user;\n    });\n  })\n  .then((data) => res.status(200).send(data))\n  .catch((err) => {\n    console.error(\"Error: Failed to read user profile in 'fetchUser.js': \",err);\n  });\n};\n\nexport default fetchUser;\n"],"sourceRoot":"/source/"}
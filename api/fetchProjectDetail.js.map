{"version":3,"sources":["api/fetchProjectDetail.js"],"names":["fetchProjectDetail","user","q","res","userId","id","projectId","result","Project","where","fetch","withRelated","then","project","toJSON","projectTitle","title","projectDescription","description","projectImage","image","wishCount","username","userPhoto","photo","Post","orderBy","fetchAll","posts","postsPromiseArray","forEach","post","postPromise","Promise","resolve","reject","doneLike","likes","like","doneReport","reports","report","postImages","newPostImages","postImage","index","url","publicIds","createdAt","created_at","UserProject","userProjectId","userProject","catch","err","console","error","push","all","doneWish","Wish","wish","data","status","send","end"],"mappings":"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","file":"api/fetchProjectDetail.js","sourcesContent":["import model from \"../db/models\";\nimport collection from \"../db/collections\";\n\n/* Fetch project details from 'project' table */\n/* Query: page */\n\nconst fetchProjectDetail = (user, q, res)=>{\n  const userId = user.id;\n  var { projectId } = q;\n\n  // Test code below\n  // let userId;\n  // if (user && user.id) {\n  //   userId = user.id;\n  // }\n  // if (q && q.id) {\n  //   userId = q.id;\n  // } else {\n  //   userId = 1;\n  // }\n\n  /* Data container to be sent */\n  const result = {};\n\n  /* Start point */\n  model.Project.where(\"id\", projectId).fetch({withRelated: [\n    \"user\"\n  ]})\n  .then((project) => {\n    project = project.toJSON();\n\n    /* project id, title, description, image, wishCount */\n    result.projectId = project.id;\n    result.projectTitle = project.title;\n    result.projectDescription = project.description;\n    result.projectImage = project.image;\n    result.wishCount = project.wishCount;\n\n    /* username, userId, photo */\n    result.userId = project.user.id;\n    result.username = project.user.username;\n    result.userPhoto = project.user.photo;\n\n    /* wishcount */\n    result.wishCount = project.wishCount;\n  })\n  .then(() => {\n    /* Fetch posts by projectId */\n    /* posts + doneLike */\n    return model.Post.where({projectId: projectId}).orderBy(\"-created_at\").fetchAll({withRelated: [\n      \"user\",\n      \"postImages\",\n      \"likes\",\n      \"reports\"\n    ]});\n  })\n  .then((posts) => {\n    posts = posts.toJSON();\n    result.posts = posts;\n    if (!posts) {\n      posts = [];\n    }\n\n    /* Array of Promises to be 'Promise.all'ed */\n    const postsPromiseArray = [];\n\n    posts.forEach((post) => {\n      /* make thenable promise object */\n      let postPromise = new Promise((resolve, reject) => {\n        /* userId, username */\n        post.username = post.user.username;\n        post.userPhoto = post.user.photo;\n        delete post.user;\n\n        /* postId */\n        // post.postId = post.id;\n\n        /* userProjectId*/\n        /* doneLike */\n        post.doneLike = false;\n        post.likes.forEach((like) => {\n          if (like.userId === userId) {\n            post.doneLike = true;\n          }\n        });\n        delete post.likes;\n\n        /* report */\n        post.doneReport = false;\n        post.reports.forEach((report) => {\n          if (report.userId === userId) {\n            post.doneReport = true;\n          }\n        });\n        delete post.reports;\n\n        /* text, picture */\n        let postImages = post.postImages;\n        let newPostImages = [];\n        postImages.forEach((postImage) => {\n          newPostImages[postImage.index] = postImage.url;\n        });\n        post.publicIds = newPostImages;\n        delete post.postImages;\n\n        /* created_at */\n        post.createdAt = post.created_at;\n        delete post.created_at;\n\n        /* project title, description */\n        model.UserProject.where(\"id\", post.userProjectId).fetch({withRelated: [\"project\"]})\n        .then((userProject) => {\n          userProject = userProject.toJSON();\n          post.projectTitle = userProject.project.title;\n          post.projectDescription = userProject.project.description;\n        })\n        .then(() => {\n          delete post.userProject;\n          resolve();\n        })\n        .catch((err) => {\n          console.error(\"Error: Failed to read userProject data in fetchAllPosts: \", err);\n          return err;\n        });\n      });\n      postsPromiseArray.push(postPromise);\n    });\n\n    return Promise.all(postsPromiseArray)\n    .then(() => {\n      return posts;\n    });\n  })\n  .then(() => {\n    /* doneWish */\n    result.doneWish = false;\n    return model.Wish.where({userId: userId, projectId: result.projectId}).fetch()\n    .then((wish) => {\n      if (wish) {\n        result.doneWish = true;\n      }\n    })\n    .catch((err) => \"Failed to print doneWish: \" + err);\n  })\n  .then(() => {\n    return result;\n  })\n  .then((data) => res.status(200).send(data))\n  .catch((err) =>{\n    console.error(\"Error: Failed to read projects in 'fetchAllPosts.js': \", err);\n    res.status(500).end();\n  });\n\n};\n\nexport default fetchProjectDetail;\n"],"sourceRoot":"/source/"}
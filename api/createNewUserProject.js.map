{"version":3,"sources":["api/createNewUserProject.js"],"names":["createNewUserProject","user","q","body","res","userId","id","userProjectId","projectId","startAt","payment","today","Date","startAtInObj","endAt","setDate","getDate","toJSON","slice","onDay","UserProject","forge","set","save","then","userProject","data","donePayment","postData","answer","console","log","status","send","catch","err","error","destroy","end"],"mappings":"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","file":"api/createNewUserProject.js","sourcesContent":["import model from \"../db/models\";\nimport collection from \"../db/collections\";\nimport paymentRequest from \"./payment\";\n\n/* Create new project in 'userProject' tables */\n/* Post Data: projectId, startAt, payment */\n\nconst createNewUserProject = (user, q, body, res) => {\n  const userId = user.id;\n\n  // Test code below\n  // let userId;\n  // if (user && user.id) {\n  //   userId = user.id;\n  // }\n  // if (q && q.id) {\n  //   userId = q.id;\n  // } else {\n  //   userId = 1;\n  // }\n\n  /* If the payment is failed, delete userProject */\n  /* by using ids below */\n  let userProjectId;\n\n  const { projectId, startAt, payment } = body;\n\n  const today = new Date();\n  const startAtInObj = new Date(startAt);\n\n  /* endAt = startAt + 6 days */\n  let endAt = new Date(startAt);\n  endAt.setDate(startAtInObj.getDate() + 6);\n  endAt = endAt.toJSON().slice(0, 10);\n\n  /* If startAt is today, assign 1 to 'onDay'. Otherwise, null */\n  let onDay = null;\n  if (today.toJSON().slice(0, 10) === startAtInObj.toJSON().slice(0, 10)) {\n    onDay = 1;\n  }\n\n  /* Start Point */\n  return model.UserProject.forge().set({\n    userId: userId,\n    projectId: projectId,\n    startAt: startAt,\n    endAt: endAt\n  }).save()\n  .then((userProject) => {\n    userProjectId = userProject.id;\n\n    const data = {\n      id: userProject.id,\n      onDay: onDay,\n      endAt: endAt,\n      donePayment: false\n    };\n    return data;\n  })\n  .then((data) => {\n    const postData = {\n      userProjectId: data.id,\n      endAt: data.endAt,\n      payment: payment\n    };\n\n    /* Send payment Request through 'payment.js' */\n    return paymentRequest(user, null, postData, null)\n    .then((answer) => {\n      data.donePayment = true;\n      return data;\n    });\n  })\n  .then((data) => {\n    /* Return data, if res === null or res === undefined */\n    if (!res) {\n      console.log(\"Methodical use: Return createNewUserProject Result: \", data);\n      return data;\n    } else {\n      res.status(200).send(data);\n    }\n  })\n  .catch((err) => {\n    /* If the process fails, including payment process, rollback */\n    console.error(\"Error: Failed to store in 'project' or 'userProject' table: \", err);\n\n    /* Delete project, userproject */\n    new model.UserProject({id: userProjectId}).destroy()\n    .then(() => {\n      console.log(\"deleted false userproject info\");\n    })\n    .catch((err) => {\n      console.error(\"Error: Failed to revert project and userproject\");\n    });\n\n    /* Return err, if res === null or res === undefined */\n    if (!res) {\n      return data;\n    } else {\n      res.status(500).send({donePayment: false}).end();\n    }\n  });\n};\n\nexport default createNewUserProject;\n"],"sourceRoot":"/source/"}
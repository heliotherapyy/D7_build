{"version":3,"sources":["api/like.js"],"names":["like","user","q","body","res","userId","id","postId","likeCount","Post","where","fetch","then","post","toJSON","Like","destroy","catch","err","save","data","status","send","console","error","end"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;;;AAEA;AACA;;AAEA,IAAMA,OAAO,SAAPA,IAAO,CAACC,IAAD,EAAOC,CAAP,EAAUC,IAAV,EAAgBC,GAAhB,EAAwB;AACnC,MAAMC,SAASJ,KAAKK,EAApB;AACA,MAAMC,SAASJ,KAAKI,MAApB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,MAAIC,YAAY,CAAhB;;AAEA;AACA,mBAAMC,IAAN,CAAWC,KAAX,CAAiB,IAAjB,EAAuBH,MAAvB,EAA+BI,KAA/B,GACCC,IADD,CACM,UAACC,IAAD,EAAU;AACd,QAAIA,IAAJ,EAAU;AACRA,aAAOA,KAAKC,MAAL,EAAP;AACAN,kBAAYK,KAAKL,SAAjB;;AAEA,aAAO,iBAAMO,IAAN,CAAWL,KAAX,CAAiB,EAACL,QAAQA,MAAT,EAAiBE,QAAQA,MAAzB,EAAjB,EAAmDI,KAAnD,EAAP;AACD,KALD,MAKO;AACL;AACA,YAAM,gBAAN;AACD;AACF,GAXD,EAYCC,IAZD,CAYM,UAACZ,IAAD,EAAU;AACd,QAAIA,IAAJ,EAAU;AACRQ,mBAAa,CAAb;AACA,aAAO,IAAI,iBAAMO,IAAV,CAAe,EAACT,IAAIN,KAAKM,EAAV,EAAf,EAA8BU,OAA9B,GACNC,KADM,CACA,UAACC,GAAD;AAAA,eAAS,uCAAuCA,GAAhD;AAAA,OADA,CAAP;AAED,KAJD,MAIO;AACLV,mBAAa,CAAb;AACA,aAAO,IAAI,iBAAMO,IAAV,CAAe,EAACV,QAAQA,MAAT,EAAiBE,QAAQA,MAAzB,EAAf,EAAiDY,IAAjD,GACNF,KADM,CACA,UAACC,GAAD;AAAA,eAAS,iCAAiCA,GAA1C;AAAA,OADA,CAAP;AAED;AACF,GAtBD,EAuBCN,IAvBD,CAuBM,YAAM;AACV,QAAI,iBAAMH,IAAV,CAAe,EAACH,IAAIC,MAAL,EAAf,EAA6BY,IAA7B,CAAkC,EAACX,WAAWA,SAAZ,EAAlC;AACD,GAzBD,EA0BCI,IA1BD,CA0BM,YAAM;AACV,WAAO,EAACL,QAAQA,MAAT,EAAiBC,WAAWA,SAA5B,EAAP;AACD,GA5BD,EA6BCI,IA7BD,CA6BM,UAACQ,IAAD,EAAU;AACdhB,QAAIiB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBF,IAArB;AACD,GA/BD,EAgCCH,KAhCD,CAgCO,UAACC,GAAD,EAAS;AACdK,YAAQC,KAAR,CAAc,+DAAd,EAA+EN,GAA/E;AACAd,QAAIiB,MAAJ,CAAW,GAAX,EAAgBI,GAAhB;AACD,GAnCD;AAoCD,CAvDD;;kBAyDezB,I","file":"api/like.js","sourcesContent":["import model from \"../db/models\";\nimport collection from \"../db/collections\";\nimport db from \"../db/config/setConfig\";\n\n/* Create new like in 'like' table */\n/* Post Data: postId */\n\nconst like = (user, q, body, res) => {\n  const userId = user.id;\n  const postId = body.postId;\n\n  // Test code below\n  // let userId;\n  // if (user && user.id) {\n  //   userId = user.id;\n  // }\n  // if (q && q.id) {\n  //   userId = q.id;\n  // } else {\n  //   userId = 1;\n  // }\n\n  /* likeCount */\n  let likeCount = 0;\n\n  /* Start Point */\n  model.Post.where(\"id\", postId).fetch()\n  .then((post) => {\n    if (post) {\n      post = post.toJSON();\n      likeCount = post.likeCount;\n\n      return model.Like.where({userId: userId, postId: postId}).fetch();\n    } else {\n      /* throw error if postId is invalid */\n      throw \"Invalid postId\";\n    }\n  })\n  .then((like) => {\n    if (like) {\n      likeCount -= 1;\n      return new model.Like({id: like.id}).destroy()\n      .catch((err) => \"Failed to destroy like table row: \" + err);\n    } else {\n      likeCount += 1;\n      return new model.Like({userId: userId, postId: postId}).save()\n      .catch((err) => \"Failed to add new like row: \" + err);\n    }\n  })\n  .then(() => {\n    new model.Post({id: postId}).save({likeCount: likeCount});\n  })\n  .then(() => {\n    return {postId: postId, likeCount: likeCount};\n  })\n  .then((data) => {\n    res.status(200).send(data);\n  })\n  .catch((err) => {\n    console.error(\"Error: Failed to store like info in Like Table in 'like.js': \", err);\n    res.status(500).end();\n  });\n};\n\nexport default like;\n"],"sourceRoot":"/source/"}